import React from "react";
import { useState, useEffect } from "react";
import { Card, Loader, FormField } from "../components";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  )
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState("");
  const [searchResults, setSearchResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  // Function to fetch posts from localStorage
  const fetchPosts = () => {
    setLoading(true);

    try {
      // Get posts from localStorage
      const storedPosts = localStorage.getItem('posts');
      
      if (storedPosts) {
        setAllPosts(JSON.parse(storedPosts));
      }
    }
    catch (err) {
      console.error("Error loading posts:", err);
      // Don't show alert for better UX
      setAllPosts([]);
    }
    finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
    
    // Add event listener to update posts when localStorage changes in another tab
    window.addEventListener('storage', fetchPosts);
    
    // Cleanup
    return () => {
      window.removeEventListener('storage', fetchPosts);
    };
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        if (!e.target.value) {
          setSearchResults(null);
          return;
        }
        
        // Handle case where there are no posts yet
        if (!allPosts || allPosts.length === 0) {
          setSearchResults([]);
          return;
        }
        
        const searchQuery = e.target.value.toLowerCase();
        const filteredResults = allPosts.filter((item) => 
          (item.name && item.name.toLowerCase().includes(searchQuery)) || 
          (item.prompt && item.prompt.toLowerCase().includes(searchQuery))
        );
        
        setSearchResults(filteredResults);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">
          The Community Showcase
        </h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning
          images generated by AI
        </p>
      </div>

      <div className="mt-16">
        <FormField 
          labelname='Search Posts' 
          type='text' 
          name='text' 
          placeholder='Search posts by name or prompt' 
          value={searchText} 
          handleChange={handleSearchChange} 
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing Results for{" "}
                <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}

            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards 
                  data={searchResults} 
                  title='No search results found' 
                />
              ) : (
                <RenderCards 
                  data={allPosts} 
                  title='No posts found. Start by creating one!' 
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
